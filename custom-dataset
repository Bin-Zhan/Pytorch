IMG_EXTENSIONS = ('.jpg', '.jpeg', '.png', '.ppm', '.bmp', '.pgm', '.tif', '.tiff', '.webp')

def has_file_allowed_extension(filename, extensions):
    """Checks if a file is an allowed extension.

    Args:
        filename (string): path to a file
        extensions (tuple of strings): extensions to consider (lowercase)

    Returns:
        bool: True if the filename ends with one of given extensions
    """
    return filename.lower().endswith(extensions)


def is_image_file(filename):
    """Checks if a file is an allowed image extension.

    Args:
        filename (string): path to a file

    Returns:
        bool: True if the filename ends with a known image extension
    """
    return has_file_allowed_extension(filename, IMG_EXTENSIONS)

class FileParser(Dataset):
    def __init__(self, txt_file, transform=None):

        with open(txt_file, 'r') as f:
            self.lines = f.readlines()
        self.transform = transform

    def __len__(self):

        return len(self.lines)

    def __getitem__(self, idx):

        img_path = self.lines[idx].strip().split()[0]
        if is_image_file(img_path):
            img = Image.open(img_path)
            label = int(self.lines[idx].strip().split()[1])
            label = torch.tensor(label)

            if self.transform:
                img = self.transform(img)

            return img, label
